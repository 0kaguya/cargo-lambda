name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          lipo -create -output target/release/cargo-lambda target/x86_64-apple-darwin/release/cargo-lambda target/aarch64-apple-darwin/release/cargo-lambda
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/release
          tar czvf cargo-lambda-${{ steps.tag.outputs.tag }}-apple-darwin.tar.gz cargo-lambda
      - name: Upload binary artifacts
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: target/release/cargo-lambda-${{ steps.tag.outputs.tag }}-apple-darwin.tar.gz

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.target }}/release
          7z a cargo-lambda-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.zip cargo-lambda.exe
      - name: Upload binary artifacts
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: target/${{ matrix.target }}/release/cargo-lambda-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.zip

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build
        run: |
          rustup target add ${{ matrix.platform.target }}
          cargo build --release --target ${{ matrix.platform.target }}
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf cargo-lambda-${{ steps.tag.outputs.tag }}-${{ matrix.platform.target }}.tar.gz cargo-lambda
      - name: Upload binary artifacts
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: target/${{ matrix.platform.target }}/release/cargo-lambda-${{ steps.tag.outputs.tag }}-${{ matrix.platform.target }}.tar.gz

  release:
    name: Publish to GitHub releases
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ macos, windows, linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.zip
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
